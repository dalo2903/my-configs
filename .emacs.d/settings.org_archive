#    -*- mode: org -*-


Archived entries from file /home/khadinh/.emacs.d/settings.org


* Programming Stuffs
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-01-06 Wed 15:13
  :ARCHIVE_FILE: ~/.emacs.d/settings.org
  :ARCHIVE_CATEGORY: settings
  :END:
  #+BEGIN_SRC emacs-lisp
      (use-package jedi
        :init
        (add-hook 'python-mode-hook 'jedi:setup)
        (setq jedi:complete-on-dot t)
        (setq jedi:get-in-function-call-delay 5000)
        (setq jedi:tooltip-medthod nil)
        :config
        (jedi:install-server))
      (use-package elpy
        :config
        (elpy-enable)
        (setq elpy-rpc-backend "jedi")
        )
      (setq c-default-style "linux")
      (setq c-basic-offset 2)
      ;;    Auto close brackets
      (electric-pair-mode)

      ;; Redo
      (add-to-list 'load-path "~/.emacs.d/redo+")
      (require 'redo+)
      (define-key global-map (kbd "C-/") 'undo)
      (define-key global-map (kbd "C-x C-/") 'redo)

      ;; linker scrip mode
      (add-to-list 'load-path "~/.emacs.d/ld-mode")
      (require 'ld-mode)
      (ld-mode)

      (use-package flycheck
        :init
        (add-hook 'c++-mode-hook
                  (lambda () (setq flycheck-clang-language-standard "c++11")))
        (global-flycheck-mode)
        (defun include-paths ()
          ;; Add include dir to path
          (setq flycheck-clang-include-path (list (expand-file-name "../include"))))

        (add-hook 'c++-mode-hook 'include-paths)
        (add-hook 'c-mode-hook 'include-paths)

        )


      ;; Configs from tuhdo
      (add-to-list 'load-path "~/.emacs.d/custom")
      (require 'setup-general)
      ;;    (require 'setup-helm)
      ;; (require 'setup-cedet)
      ;; Mouse?
      ;;  (setq helm-allow-mouse t)

      ;;    (require 'setup-helm-gtags)
      (require 'setup-editing)


      (use-package ivy
        :init
        (ivy-mode 1)
        (use-package ivy-posframe
          :init
          (ivy-posframe-mode 1))
        (use-package counsel
          :init
          (counsel-mode 1))
        (use-package counsel-gtags
          :bind-keymap ("C-c g" . counsel-gtags-command-map)
          :config
          (counsel-gtags-mode 1))
        (use-package counsel-company)

        (use-package counsel-projectile
          :bind-keymap ("C-x p" . projectile-command-map)
          :init
          (counsel-projectile-mode 1))


        (setq ivy-use-virtual-buffers t)
        (setq enable-recursive-minibuffers t)
        ;;(setq ivy-display-function 'ivy-posframe-display)

        ;; enable this if you want `swiper' to use it
        ;;(setq search-default-mode #'char-fold-to-regexp)

        (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))



      (use-package irony
        :init
        (use-package rtags
          :init
          (use-package company-rtags))
        (use-package company-irony-c-headers)
        (use-package company-irony)
        (use-package semantic
          :init
          (semantic-mode 1))

        (add-hook 'c++-mode-hook 'irony-mode)
        (add-hook 'c-mode-hook 'irony-mode)
        (add-hook 'objc-mode-hook 'irony-mode)
        (defun my-irony-mode-hook ()
          "Custom irony mode hook to remap keys."
          (define-key irony-mode-map [remap completion-at-point]
            'irony-completion-at-point-async)
          (define-key irony-mode-map [remap complete-symbol]
            'irony-completion-at-point-async))

        (add-hook 'irony-mode-hook 'my-irony-mode-hook)
        (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
        (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)


        (setq company-backends (delete 'company-semantic company-backends))
        (eval-after-load 'company
          '(add-to-list
            'company-backends '(company-irony-c-headers
                                company-irony company-yasnippet
                                company-clang company-rtags)
            )
          )
        ;;    (setq company-idle-delay 0)
        ;;       (define-key c-mode-map [(tab)] 'company-complete)
        ;;      (define-key c++-mode-map [(tab)] 'company-complete)
        ;; ;; Delay
        ;;           when idle because I want to be able to think
        (setq company-idle-delay 0.2)

        (setq-mode-local c-mode semanticdb-find-default-throttle
                         '(local project unloaded recursive))
        (setq-mode-local c++-mode semanticdb-find-default-throttle
                         '(local project unloaded recursive))

        (semantic-remove-system-include "/usr/include/" 'c++-mode)
        (semantic-remove-system-include "/usr/local/include/" 'c++-mode)
        (add-hook 'semantic-init-hooks
                  'semantic-reset-system-include)
        )

      ;; Folding code
      (use-package hideshow
        :init
        (defun toggle-selective-display (column)
          (interactive "P")
          (set-selective-display
           (or column
               (unless selective-display
                 (1+ (current-column))))))

        (defun toggle-hiding (column)
          (interactive "P")
          (if hs-minor-mode
              (if (condition-case nil
                      (hs-toggle-hiding)
                    (error t))
                  (hs-show-all))
            (toggle-selective-display column)))
        (global-set-key (kbd "M-<up>") 'beginning-of-defun)
        (global-set-key (kbd "M-<down>") 'end-of-defun)
        (global-set-key (kbd "C-x \\") 'toggle-hiding)
        (global-set-key (kbd "C-\\") 'toggle-selective-display)
        (add-hook 'c-mode-common-hook  'hs-minor-mode)
        (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
        (use-package aggressive-indent
          :init
          (global-aggressive-indent-mode 1)
          (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
          )
        )

      ;; Fix indent in orgmode
      (setq org-src-tab-acts-natively t)
      (defun my-org-mode-hook ()
        (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
      (add-hook 'org-mode-hook #'my-org-mode-hook)
      (use-package helm-ag)
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "multimarkdown"))


  #+END_SRC

